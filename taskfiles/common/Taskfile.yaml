# https://taskfile.dev

version: '3'

tasks:
  cleanup-workdir:
    cmds:
      - sudo rm -rf {{.WORKDIR}}

  git-clone:
    cmds:
      - chmod 755 {{.WORKDIR}}
      - rm -rf {{.SRC_DIR}}; mkdir -p {{.SRC_DIR}}
      - cd {{.SRC_DIR}}; git clone https://github.com/{{.GH_ORG}}/{{.GH_REPO}}.git

  login-docker-registry:
    cmds:
      - echo $GH_PAT | docker login {{.DOCKER_REGISTRY}} -u {{.DOCKER_USERNAME}} --password-stdin

  build-docker-image:
    cmds:
      - |
        FROM_IMAGE="{{.DOCKER_RUN_IMAGE}}"
        if [ "{{.VERIFY_BASE_IMAGE}}" == "true" ]; then
          if [ "$FROM_IMAGE" == "" ]; then
           FROM_IMAGE=$(grep FROM {{.DOCKER_DIR}}/{{.DOCKERFILE_NAME}} | sed -r 's/FROM\s+//g')
         fi
          cosign verify --key {{.COSIGN_PUBLIC_KEY}} $FROM_IMAGE
        fi
        if [ "{{.DOCKER_BUILD_TYPE}}" == "buildx" ]; then
          echo Building {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} with buildx
          pushd {{.DOCKER_DIR}}
            ARGS="-t {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} . -f {{.DOCKERFILE_NAME}}"
            if [ "{{.DOCKER_RUN_IMAGE}}" ]; then
              ARGS="$ARGS --build-arg BASE_IMAGE={{.DOCKER_RUN_IMAGE}}"
            fi
            echo Running: docker buildx build $ARGS
            docker buildx build $ARGS
          popd
        fi
        if [ "{{.DOCKER_BUILD_TYPE}}" == "kaniko" ]; then
          echo Building {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} with kaniko
          #docker run -v `pwd`/{{.DOCKER_DIR}}:/workspace -v {{.HOME}}/.docker/config.json:/kaniko/.docker/config.json:ro gcr.io/kaniko-project/executor:latest --dockerfile /workspace/{{.DOCKERFILE_NAME}} --destination {{.DOCKER_REGISTRY}}/{{.GH_ORG}}/{{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} --context dir:///workspace/ 
          docker run -v `pwd`/{{.DOCKER_DIR}}:/workspace -v {{.HOME}}/.docker/config.json:/kaniko/.docker/config.json:ro gcr.io/kaniko-project/executor:latest --dockerfile /workspace/{{.DOCKERFILE_NAME}} --destination {{.DOCKER_REGISTRY}}/{{.GH_ORG}}/{{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} --context dir:///workspace/ --tarPath /workspace/{{.DOCKER_IMAGE_NAME}}-{{.DOCKER_IMAGE_TAG}}.tar --no-push
        fi
        if [ "{{.DOCKER_BUILD_TYPE}}" == "cnb" ]; then
          echo Building {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} with Cloud Native Buildpacks
          pack config default-builder paketobuildpacks/builder:base
          pushd {{.DOCKER_DIR}}
            echo Running: pack build {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}
            pack build {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}
          popd
        fi
        if [ "{{.DOCKER_BUILD_TYPE}}" == "jib" ]; then
          echo Building {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} with jib
          pushd {{.DOCKER_DIR}}
            echo Running: jib jar --from {{.DOCKER_RUN_IMAGE}} --target docker://{{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} {{.BUILD_DIR}}/app.jar
            jib jar --from {{.DOCKER_RUN_IMAGE}} --target docker://{{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} {{.BUILD_DIR}}/app.jar
          popd
        fi
        if [ "{{.DOCKER_BUILD_TYPE}}" == "podman" ]; then
          echo Stopping docker service
          sudo systemctl stop docker
          echo Building {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} with podman
          pushd {{.DOCKER_DIR}}
            ARGS="-t {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} . -f {{.DOCKERFILE_NAME}}"
            if [ "{{.DOCKER_RUN_IMAGE}}" ]; then
              ARGS="$ARGS --build-arg BASE_IMAGE={{.DOCKER_RUN_IMAGE}}"
            fi
            echo Running: podman build $ARGS
            podman build $ARGS
            echo Saving podman image as tar file for scanning and SBOM
            echo Running: podman save -o {{.DOCKER_IMAGE_NAME}}-{{.DOCKER_IMAGE_TAG}}.tar {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}
            podman save -o {{.DOCKER_IMAGE_NAME}}-{{.DOCKER_IMAGE_TAG}}.tar {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}
          popd
        fi

  scan-docker-image:
    cmds:
      - |
        mkdir -p {{.SCAN_RESULT_DIR}}
        if [ "{{.DOCKER_IMAGE_SCANNER}}" == "trivy" ]; then
          ARGS="-f json -o {{.SCAN_RESULT_DIR}}/trivy-scan-{{.DOCKER_IMAGE_NAME}}-{{.DOCKER_IMAGE_TAG}}.json"
          if [ "{{.STOP_ON_CRITICAL_VULNS}}" == "true" ]; then
            ARGS="--exit-code 1 --severity CRITICAL $ARGS"
          fi
          if [ "{{.DOCKER_BUILD_TYPE}}" == "buildx" ] || [ "{{.DOCKER_BUILD_TYPE}}" == "cnb" ] || [ "{{.DOCKER_BUILD_TYPE}}" == "jib" ]; then
            ARGS="$ARGS {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}"
          fi
          if [ "{{.DOCKER_BUILD_TYPE}}" == "kaniko" ] || [ "{{.DOCKER_BUILD_TYPE}}" == "podman" ]; then
            ARGS="$ARGS --input {{.DOCKER_DIR}}/{{.DOCKER_IMAGE_NAME}}-{{.DOCKER_IMAGE_TAG}}.tar"
          fi
          echo Running: trivy image $ARGS
          trivy image $ARGS
        fi
        if [ "{{.DOCKER_IMAGE_SCANNER}}" == "grype" ]; then
          ARGS="-o json --file {{.SCAN_RESULT_DIR}}/grype-scan-{{.DOCKER_IMAGE_NAME}}-{{.DOCKER_IMAGE_TAG}}.json"
          if [ "{{.STOP_ON_CRITICAL_VULNS}}" == "true" ]; then
            ARGS="-f Critical $ARGS"
          fi
          if [ "{{.DOCKER_BUILD_TYPE}}" == "buildx" ] || [ "{{.DOCKER_BUILD_TYPE}}" == "cnb" ] || [ "{{.DOCKER_BUILD_TYPE}}" == "jib" ]; then
            ARGS="$ARGS {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}"
          fi 
          if [ "{{.DOCKER_BUILD_TYPE}}" == "kaniko" ] || [ "{{.DOCKER_BUILD_TYPE}}" == "podman" ]; then
            ARGS="$ARGS {{.DOCKER_DIR}}/{{.DOCKER_IMAGE_NAME}}-{{.DOCKER_IMAGE_TAG}}.tar"
          fi
          echo Running: grype $ARGS
          grype $ARGS
        fi

  generate-sbom-docker-image:
    cmds:
      - |
        mkdir -p {{.SCAN_RESULT_DIR}}
        if [ "{{.DOCKER_SBOM_GENERATOR}}" == "syft" ]; then
          ARGS="-o json --file {{.SCAN_RESULT_DIR}}/syft-sbom-{{.DOCKER_IMAGE_NAME}}-{{.DOCKER_IMAGE_TAG}}.json packages"
          if [ "{{.DOCKER_BUILD_TYPE}}" == "buildx" ] || [ "{{.DOCKER_BUILD_TYPE}}" == "cnb" ] || [ "{{.DOCKER_BUILD_TYPE}}" == "jib" ]; then
            ARGS="$ARGS {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}"
          fi
          if [ "{{.DOCKER_BUILD_TYPE}}" == "kaniko" ] || [ "{{.DOCKER_BUILD_TYPE}}" == "podman" ]; then
            ARGS="$ARGS file:{{.DOCKER_DIR}}/{{.DOCKER_IMAGE_NAME}}-{{.DOCKER_IMAGE_TAG}}.tar"
          fi
          echo Running: syft $ARGS
          syft $ARGS
        fi

  scan-dockerfile:
    cmds:
      - |
        mkdir -p {{.SCAN_RESULT_DIR}}
        if [ "{{.DOCKERFILE_SCANNER}}" == "semgrep" ]; then
          semgrep --config=auto {{.DOCKER_DIR}}/{{.DOCKERFILE_NAME}} | tee -a {{.SCAN_RESULT_DIR}}/semgrep-dockerfile-{{.DOCKERFILE_NAME}}.txt
        else
        #if [ "{{.DOCKERFILE_SCANNER}}" == "trivy" ]; then
          ARGS="-f json -o {{.SCAN_RESULT_DIR}}/trivy-dockerfile-{{.DOCKERFILE_NAME}}.json {{.DOCKER_DIR}}/{{.DOCKERFILE_NAME}}"
          trivy config $ARGS
        fi

  push-docker-image:
    cmds:
      - |
        if [ "{{.DOCKER_BUILD_TYPE}}" == "buildx" ] || [ "{{.DOCKER_BUILD_TYPE}}" == "cnb" ] || [ "{{.DOCKER_BUILD_TYPE}}" == "jib" ]; then
          docker tag {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} {{.DOCKER_REGISTRY}}/{{.GH_ORG}}/{{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}
          docker push {{.DOCKER_REGISTRY}}/{{.GH_ORG}}/{{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}
        fi
        if [ "{{.DOCKER_BUILD_TYPE}}" == "kaniko" ]; then
          echo Running: crane push {{.DOCKER_DIR}}/{{.DOCKER_IMAGE_NAME}}-{{.DOCKER_IMAGE_TAG}}.tar {{.DOCKER_REGISTRY}}/{{.GH_ORG}}/{{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}
          crane push {{.DOCKER_DIR}}/{{.DOCKER_IMAGE_NAME}}-{{.DOCKER_IMAGE_TAG}}.tar {{.DOCKER_REGISTRY}}/{{.GH_ORG}}/{{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}
        fi
        if [ "{{.DOCKER_BUILD_TYPE}}" == "podman" ]; then
          podman tag {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} {{.DOCKER_REGISTRY}}/{{.GH_ORG}}/{{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}
          podman push {{.DOCKER_REGISTRY}}/{{.GH_ORG}}/{{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}
        fi

  sign-docker-image:
    cmds:
      - COSIGN_PASSWORD=$(cat {{.HOME}}/.k) cosign sign --key {{.COSIGN_PRIVATE_KEY}} {{.DOCKER_REGISTRY}}/{{.GH_ORG}}/{{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}

  verify-signature-docker-image:
    cmds:
      - cosign verify --key {{.COSIGN_PUBLIC_KEY}} {{.DOCKER_REGISTRY}}/{{.GH_ORG}}/{{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}

  build-app:
    cmds:
      - task: git-clone
      - task: login-docker-registry
      - docker run --rm -v `pwd`/{{.WORKDIR}}:/tmp/workspace {{.DOCKER_REGISTRY}}/{{.GH_ORG}}/{{.DOCKER_BUILD_IMAGE}} bash -c "cd /tmp/workspace/{{.SRC_DIR_NAME}}/{{.GH_REPO}}; bash {{.BUILD_SCRIPT}}"

  publish-jar:
    cmds:
      - mkdir -p {{.ARTIFACT_DIR}}
        #- find {{.SRC_DIR}}/ -regextype posix-basic -regex  ".*{{.BUILD_DIR}}\/{{.GH_REPO}}-{{.APP_VERSION}}\.jar" -exec cp {} {{.ARTIFACT_DIR}} \;
      - mv {{.SRC_DIR}}/{{.GH_REPO}}/{{.BUILD_DIR}}/{{.GH_REPO}}-{{.APP_VERSION}}\.jar {{.ARTIFACT_DIR}}

  retrieve-jar:
    cmds:
      - mkdir -p {{.SRC_DIR}}/{{.GH_REPO}}/{{.BUILD_DIR}}
      - cp {{.ARTIFACT_DIR}}/{{.GH_REPO}}-{{.APP_VERSION}}.jar {{.SRC_DIR}}/{{.GH_REPO}}/{{.BUILD_DIR}}/app.jar

  docker-pipeline:
    cmds:
      - task: login-docker-registry
      - task: scan-dockerfile
        vars:
          DOCKER_DIR: "{{.DOCKER_DIR}}"
          DOCKERFILE_NAME: '{{.DOCKERFILE_NAME}}'
          DOCKERFILE_SCANNER: "{{.DOCKERFILE_SCANNER}}"
          SCAN_RESULT_DIR: "{{.SCAN_RESULT_DIR}}"
      - task: build-docker-image
        vars:
          DOCKER_DIR: '{{.DOCKER_DIR}}'
          DOCKER_BUILD_IMAGE: '{{.DOCKER_BUILD_IMAGE}}'
          DOCKER_BUILD_TYPE: '{{.DOCKER_BUILD_TYPE}}'
          DOCKER_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
          DOCKER_IMAGE_TAG: '{{.DOCKER_IMAGE_TAG}}'
          DOCKER_RUN_IMAGE: '{{.DOCKER_RUN_IMAGE}}'
          DOCKERFILE_NAME: '{{.DOCKERFILE_NAME}}'
          VERIFY_BASE_IMAGE: '{{.VERIFY_BASE_IMAGE}}'
      - task: scan-docker-image
        vars:
          DOCKER_BUILD_TYPE: '{{.DOCKER_BUILD_TYPE}}'
          DOCKER_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
          DOCKER_IMAGE_SCANNER: "{{.DOCKER_IMAGE_SCANNER}}"
          DOCKER_IMAGE_TAG: '{{.DOCKER_IMAGE_TAG}}'
          DOCKERFILE_SCANNER: "{{.DOCKERFILE_SCANNER}}"
          SCAN_RESULT_DIR: "{{.SCAN_RESULT_DIR}}"
          STOP_ON_CRITICAL_VULNS: "{{.STOP_ON_CRITICAL_VULNS}}"
      - task: generate-sbom-docker-image
        vars:
          DOCKER_BUILD_TYPE: '{{.DOCKER_BUILD_TYPE}}'
          DOCKER_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
          DOCKER_IMAGE_TAG: '{{.DOCKER_IMAGE_TAG}}'
          DOCKER_SBOM_GENERATOR: "{{.DOCKER_SBOM_GENERATOR}}"
          SCAN_RESULT_DIR: "{{.SCAN_RESULT_DIR}}"
      - task: push-docker-image
        vars:
          DOCKER_BUILD_TYPE: '{{.DOCKER_BUILD_TYPE}}'
          DOCKER_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
          DOCKER_IMAGE_TAG: '{{.DOCKER_IMAGE_TAG}}'
      - task: sign-docker-image
        vars:
          DOCKER_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
          DOCKER_IMAGE_TAG: '{{.DOCKER_IMAGE_TAG}}'
      - task: verify-signature-docker-image
        vars:
          DOCKER_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
          DOCKER_IMAGE_TAG: '{{.DOCKER_IMAGE_TAG}}'

  java-pipeline:
    cmds:
      - task: build-app
        vars:
          DOCKER_BUILD_IMAGE: "{{.DOCKER_BUILD_IMAGE}}"
      - task: publish-jar
      # TODO
      # task: sign-jar
      - task: retrieve-jar
      - task: docker-pipeline
        vars:
          DOCKER_BUILD_IMAGE: '{{.DOCKER_BUILD_IMAGE}}'
          DOCKER_BUILD_TYPE: '{{.DOCKER_BUILD_TYPE}}'
          DOCKER_DIR: "{{.SRC_DIR}}/{{.GH_REPO}}"
          DOCKER_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
          DOCKER_IMAGE_SCANNER: "{{.DOCKER_IMAGE_SCANNER}}"
          DOCKER_IMAGE_TAG: '{{.DOCKER_IMAGE_TAG}}'
          DOCKER_RUN_IMAGE: '{{.DOCKER_RUN_IMAGE}}'
          DOCKER_SBOM_GENERATOR: "{{.DOCKER_SBOM_GENERATOR}}"
          DOCKERFILE_NAME: '{{.DOCKERFILE_NAME}}'
          DOCKERFILE_SCANNER: "{{.DOCKERFILE_SCANNER}}"
          SCAN_RESULT_DIR: "{{.SCAN_RESULT_DIR}}"
          STOP_ON_CRITICAL_VULNS: "{{.STOP_ON_CRITICAL_VULNS}}"
          VERIFY_BASE_IMAGE: '{{.VERIFY_BASE_IMAGE}}'
