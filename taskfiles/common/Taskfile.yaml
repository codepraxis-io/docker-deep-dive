# https://taskfile.dev

version: '3'

tasks:
  cleanup-workdir:
    cmds:
      - sudo rm -rf {{.WORKDIR}}

  git-clone:
    cmds:
      - chmod 755 {{.WORKDIR}}
      - rm -rf {{.SRC_DIR}}; mkdir -p {{.SRC_DIR}}
      - cd {{.SRC_DIR}}; git clone https://github.com/{{.GH_ORG}}/{{.GH_REPO}}.git

  docker-login:
    cmds:
      - echo $GH_PAT | docker login {{.DOCKER_REGISTRY}} -u {{.DOCKER_USERNAME}} --password-stdin

  docker-build:
    cmds:
      - |
        if [ "{{.DOCKER_BUILD_TYPE}}" == "kaniko" ]; then
          docker run -v `pwd`/{{.DOCKER_DIR}}:/workspace -v {{.HOME}}/.docker/config.json:/kaniko/.docker/config.json:ro gcr.io/kaniko-project/executor:latest --dockerfile /workspace/{{.DOCKERFILE_NAME}} --destination {{.DOCKER_REGISTRY}}/{{.GH_ORG}}/{{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} --context dir:///workspace/ --no-push
        else
          cd {{.DOCKER_DIR}}; docker buildx build -t {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} . -f {{.DOCKERFILE_NAME}}
        fi

  docker-image-scan:
    cmds:
      - |
        mkdir -p {{.SCAN_RESULT_DIR}}
        if [ "{{.DOCKER_IMAGE_SCANNER}}" == "trivy" ]; then
          ARGS="-f json -o {{.SCAN_RESULT_DIR}}/trivy-scan-{{.DOCKER_IMAGE_NAME}}-{{.DOCKER_IMAGE_TAG}}.json {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}"
          if [ "{{.STOP_ON_CRITICAL_VULNS}}" == "true" ]; then
            ARGS="--exit-code 1 --severity CRITICAL $ARGS"
          fi
          trivy image $ARGS
        fi

  dockerfile-scan:
    cmds:
      - |
        mkdir -p {{.SCAN_RESULT_DIR}}
        if [ "{{.DOCKERFILE_SCANNER}}" == "semgrep" ]; then
          semgrep --config=auto {{.DOCKER_DIR}}/{{.DOCKERFILE_NAME}} | tee -a {{.SCAN_RESULT_DIR}}/semgrep-dockerfile-{{.DOCKERFILE_NAME}}.txt
        else
        #if [ "{{.DOCKERFILE_SCANNER}}" == "trivy" ]; then
          ARGS="-f json -o {{.SCAN_RESULT_DIR}}/trivy-dockerfile-{{.DOCKERFILE_NAME}}.json {{.DOCKER_DIR}}/{{.DOCKERFILE_NAME}}"
          trivy config $ARGS
        fi

  docker-push:
    cmds:
      - docker tag {{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}} {{.DOCKER_REGISTRY}}/{{.GH_ORG}}/{{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}
      - docker push {{.DOCKER_REGISTRY}}/{{.GH_ORG}}/{{.DOCKER_IMAGE_NAME}}:{{.DOCKER_IMAGE_TAG}}

  build-app:
    cmds:
      - task: git-clone
      - task: docker-login
      - docker run --rm -v `pwd`/{{.WORKDIR}}:/tmp/workspace {{.DOCKER_REGISTRY}}/{{.GH_ORG}}/{{.DOCKER_BUILD_IMAGE}} bash -c "cd /tmp/workspace/{{.SRC_DIR_NAME}}/{{.GH_REPO}}; bash {{.BUILD_SCRIPT}}"

  publish-jar:
    cmds:
      - mkdir -p {{.ARTIFACT_DIR}}
        #- find {{.SRC_DIR}}/ -regextype posix-basic -regex  ".*{{.BUILD_DIR}}\/{{.GH_REPO}}-{{.APP_VERSION}}\.jar" -exec cp {} {{.ARTIFACT_DIR}} \;
      - mv {{.SRC_DIR}}/{{.GH_REPO}}/{{.BUILD_DIR}}/{{.GH_REPO}}-{{.APP_VERSION}}\.jar {{.ARTIFACT_DIR}}

  retrieve-jar:
    cmds:
      - mkdir -p {{.SRC_DIR}}/{{.GH_REPO}}/{{.BUILD_DIR}}
      - cp {{.ARTIFACT_DIR}}/{{.GH_REPO}}-{{.APP_VERSION}}.jar {{.SRC_DIR}}/{{.GH_REPO}}/{{.BUILD_DIR}}/app.jar

  build-push-docker-image:
    cmds:
      - task: docker-login
      - task: dockerfile-scan
        vars:
          DOCKER_DIR: "{{.DOCKER_DIR}}"
          DOCKERFILE_NAME: '{{.DOCKERFILE_NAME}}'
          DOCKERFILE_SCANNER: "{{.DOCKERFILE_SCANNER}}"
          SCAN_RESULT_DIR: "{{.SCAN_RESULT_DIR}}"
      - task: docker-build
        vars:
          DOCKER_DIR: '{{.DOCKER_DIR}}'
          DOCKERFILE_NAME: '{{.DOCKERFILE_NAME}}'
          DOCKER_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
          DOCKER_IMAGE_TAG: '{{.DOCKER_IMAGE_TAG}}'
      - task: docker-image-scan
        vars:
          DOCKER_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
          DOCKER_IMAGE_TAG: '{{.DOCKER_IMAGE_TAG}}'
      - task: docker-push
        vars:
          DOCKER_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
          DOCKER_IMAGE_TAG: '{{.DOCKER_IMAGE_TAG}}'

  build-push-docker-image-java:
    cmds:
      - task: build-app
        vars:
          DOCKER_BUILD_IMAGE: "{{.DOCKER_BUILD_IMAGE}}"
          DOCKER_BUILD_TYPE: "{{.DOCKER_BUILD_TYPE}}"
          DOCKER_IMAGE_NAME: "{{.GH_REPO}}"
          DOCKER_IMAGE_TAG: "{{.DOCKER_IMAGE_TAG}}"
          DOCKERFILE_NAME: "{{.DOCKERFILE_NAME}}"
          DOCKER_IMAGE_SCANNER: "{{.DOCKER_IMAGE_SCANNER}}"
          DOCKERFILE_SCANNER: "{{.DOCKERFILE_SCANNER}}"
          STOP_ON_CRITICAL_VULNS: "{{.STOP_ON_CRITICAL_VULNS}}"
      - task: publish-jar
      # TODO
      # task: sign-jar
      - task: retrieve-jar
        vars:
      - task: dockerfile-scan
        vars:
          DOCKER_DIR: "{{.SRC_DIR}}/{{.GH_REPO}}"
          DOCKERFILE_NAME: '{{.DOCKERFILE_NAME}}'
          DOCKERFILE_SCANNER: "{{.DOCKERFILE_SCANNER}}"
          SCAN_RESULT_DIR: "{{.SCAN_RESULT_DIR}}"
      - task: docker-build
        vars:
          DOCKER_DIR: '{{.DOCKER_DIR}}'
          DOCKER_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
          DOCKER_IMAGE_TAG: '{{.DOCKER_IMAGE_TAG}}'
          DOCKERFILE_NAME: '{{.DOCKERFILE_NAME}}'
      - task: docker-image-scan
        vars:
          DOCKER_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
          DOCKER_IMAGE_TAG: '{{.DOCKER_IMAGE_TAG}}'
          DOCKERFILE_SCANNER: "{{.DOCKERFILE_SCANNER}}"
          SCAN_RESULT_DIR: "{{.SCAN_RESULT_DIR}}"
          STOP_ON_CRITICAL_VULNS: "{{.STOP_ON_CRITICAL_VULNS}}"
      - task: docker-push
        vars:
          DOCKER_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
          DOCKER_IMAGE_TAG: '{{.DOCKER_IMAGE_TAG}}'
      # TODO
      # task: sign-docker-image
      #

